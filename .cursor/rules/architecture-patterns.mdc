---
description: 
globs: 
alwaysApply: true
---
# Architecture Patterns

## Design Principles

### Single Workspace Architecture (v3.0)
**Design Decision**: Completely removed workspace concept for simplified architecture
- **Why**: Eliminates complexity, improves performance, clearer UX
- **Implementation**: All operations filter by `database_id` arrays instead of `workspace_id`
- **Benefits**: Direct database-level operations, simplified permissions, better maintainability

### Enhanced RAG with Contextual Retrieval (v4.0)
**Anthropic-Style Implementation Pattern**:
- **Context Generation**: AI generates contextual descriptions for each chunk explaining document relationships
- **Content-Aware Processing**: Automatic detection and specialized handling (articles vs reading notes vs documentation)
- **Adjacent Context Enrichment**: Search results include neighboring chunks for narrative flow
- **Dual Embedding Strategy**: 70% contextual embeddings, 30% content embeddings for optimal relevance

## Service Layer Patterns

### Dependency Injection Pattern
**Implementation**: Services are injected via factory functions
```python
# Pattern: Factory-based service injection
async def get_openai_service() -> OpenAIService:
    return OpenAIService(config=get_model_config())
```

### Configuration-Driven Architecture
**Pattern**: All LLM behavior controlled by [backend/config/models.toml](mdc:backend/config/models.toml)
- **Centralized Configuration**: Single source of truth for models, prompts, thresholds
- **Runtime Flexibility**: Change AI behavior without code changes
- **Type Safety**: [backend/config/model_config.py](mdc:backend/config/model_config.py) provides typed configuration access

### Contextual Search Engine Pattern
**Implementation**: [backend/services/contextual_search_engine.py](mdc:backend/services/contextual_search_engine.py)
- **Strategy Pattern**: Different chunking strategies based on content type
- **Template Method**: Consistent search flow with customizable enrichment
- **Configurable Parameters**: All search behavior controlled via configuration

## Database Patterns

### Single Database, Multi-Tenant Design
**Pattern**: One database with filtering by `database_id` arrays
- **Benefits**: Simplified queries, better performance, easier maintenance
- **Implementation**: All vector search functions accept `database_ids: List[str]`

### Contextual Chunk Storage
**Enhanced Schema Pattern**:
```sql
-- Pattern: Contextual metadata with positional linking
document_chunks (
    chunk_context TEXT,           -- AI-generated contextual description
    chunk_summary TEXT,           -- AI-generated summary
    contextual_embedding VECTOR,  -- Enhanced embedding with context
    prev_chunk_id UUID,          -- Positional linking
    next_chunk_id UUID,          -- Maintains document flow
    document_section TEXT,        -- Structural awareness
    section_hierarchy JSONB      -- Hierarchical context
)
```

## API Design Patterns

### Router-Service-Database Layering
**Pattern**: Clear separation of concerns
- **Routers**: [backend/routers/](mdc:backend/routers) - HTTP handling, validation
- **Services**: [backend/services/](mdc:backend/services) - Business logic
- **Database**: [backend/database.py](mdc:backend/database.py) - Data access

### Streaming Response Pattern
**Implementation**: Server-Sent Events for real-time chat
- **Benefits**: Progressive loading, better UX, efficient resource usage
- **Pattern**: Generator functions with `yield` for streaming data

### Error Handling Pattern
**Standardized Error Response**:
```python
# Pattern: Consistent error structure
{
    "error": "descriptive_error_type",
    "message": "User-friendly message",
    "request_id": "correlation_id"
}
```

## Frontend Patterns

### Hook-Based State Management
**Pattern**: Custom hooks for complex state logic
- **Separation**: Business logic in hooks, UI logic in components
- **Reusability**: Hooks shared across components
- **Examples**: [hooks/use-chat-sessions.ts](mdc:hooks/use-chat-sessions.ts), [hooks/use-notion-databases.ts](mdc:hooks/use-notion-databases.ts)

### Component Composition Pattern
**Implementation**: Modular UI components with clear boundaries
- **Container Components**: Handle state and data fetching
- **Presentation Components**: Pure UI rendering
- **Shared Components**: [components/ui/](mdc:components/ui) for consistent design system

### Configuration-Based UI Rendering
**Pattern**: UI behavior controlled by backend configuration
- **Dynamic Model Selection**: Chat interface adapts to available models
- **Configurable Filtering**: Search filters based on database schema
- **Adaptive Features**: UI features enabled/disabled based on configuration

## Data Flow Patterns

### Request Correlation Pattern
**Implementation**: Request IDs link frontend and backend logs
- **Tracing**: Full request lifecycle tracking
- **Debugging**: Correlated logs across services
- **Performance**: Request timing and performance metrics

### Contextual Data Enrichment
**Pattern**: Progressive context building
1. **Base Search**: Vector similarity matching
2. **Context Enrichment**: Adjacent chunk retrieval
3. **Metadata Enhancement**: Document and chunk metadata
4. **Citation Generation**: Source attribution with direct links

### Caching Strategy Pattern
**Implementation**: Multi-layer caching approach
- **Configuration Caching**: Model configs cached at startup
- **Embedding Caching**: Expensive embeddings cached in database
- **Search Result Caching**: Contextual search results cached for performance

## Testing Patterns

### Component Testing Pattern
**Fast Integration Testing**: Test components without full stack
```bash
# Pattern: Isolated component testing
cd backend && uv run python -c "import service; service.test_component()"
```

### Configuration Testing Pattern
**Validate Configuration**: [backend/scripts/model_config_demo.py](mdc:backend/scripts/model_config_demo.py)
- **Config Validation**: Ensure all configurations are valid
- **Model Testing**: Test all configured models
- **Integration Testing**: Validate service integration

## Deployment Patterns

### Static Export Pattern
**Next.js Configuration**: [next.config.js](mdc:next.config.js)
- **Static Generation**: All pages pre-rendered at build time
- **Edge Deployment**: Optimized for CDN deployment
- **Environment Flexibility**: Runtime configuration via environment variables

### Python Package Management
**uv Package Manager Pattern**: [backend/pyproject.toml](mdc:backend/pyproject.toml)
- **Dependency Locking**: Reproducible builds with lock files
- **Virtual Environment**: Isolated Python environments
- **Fast Installation**: Faster than pip with better resolution
