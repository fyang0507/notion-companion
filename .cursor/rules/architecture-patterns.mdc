---
description: 
globs: 
alwaysApply: false
---
# Architecture Patterns

## Full-Stack Structure
- **Frontend**: `app/` directory uses Next.js App Router with static export
- **Backend**: `backend/` directory contains FastAPI application with routers and services
- **Components**: Extensive shadcn/ui component library in `components/ui/`
- **Shared Types**: TypeScript definitions in `types/` directory

## RAG Implementation
- Vector embeddings stored in Supabase pgvector
- OpenAI text-embedding-3-small for document embeddings
- GPT-4 for chat responses with retrieved context
- Server-Sent Events for streaming chat responses

## API Architecture
- FastAPI routers in `backend/routers/` for organized endpoints
- Service layer in `backend/services/` for business logic
- Pydantic models for request/response validation
- Main endpoints: `/api/chat` (streaming), `/api/search` (vector), `/api/notion/webhook`

## Database Schema
Core tables: `users`, `workspaces`, `documents`, `chat_sessions`, `api_usage`
Uses Supabase Auth for user management and pgvector for similarity search.

## Frontend Patterns
- React components with TypeScript and Tailwind CSS
- Custom hooks for state management (`useAuth`, `useToast`)
- Theme switching via next-themes (system/light/dark)
- Responsive design with mobile-first approach
