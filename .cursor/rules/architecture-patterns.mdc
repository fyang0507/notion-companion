---
description: 
globs: 
alwaysApply: true
---
# Architecture Patterns

## Full-Stack Structure
- **Frontend**: [app/](mdc:app/) directory uses Next.js App Router with static export
- **Backend**: [backend/](mdc:backend/) directory contains FastAPI application with routers and services
- **Components**: Extensive shadcn/ui component library in [components/ui/](mdc:components/ui/)
- **Shared Types**: TypeScript definitions in [types/](mdc:types/) directory

## RAG Implementation
- Vector embeddings stored in Supabase pgvector
- OpenAI text-embedding-3-small for document embeddings
- GPT-4 for chat responses with retrieved context
- Server-Sent Events for streaming chat responses
- Document processing handled by [document_processor.py](mdc:backend/services/document_processor.py)

## API Architecture
- FastAPI routers in [backend/routers/](mdc:backend/routers/) for organized endpoints
- Service layer in [backend/services/](mdc:backend/services/) for business logic
- Main app configuration in [backend/main.py](mdc:backend/main.py)
- Database initialization in [backend/database.py](mdc:backend/database.py)
- Pydantic models for request/response validation
- Main endpoints: `/api/chat` (streaming), `/api/search` (vector), `/api/notion/webhook`

## Database Schema
Core tables: `users`, `workspaces`, `documents`, `chat_sessions`, `api_usage`
Uses Supabase Auth for user management and pgvector for similarity search.
Schema files: [backend/schema.sql](mdc:backend/schema.sql), [backend/drop_schema.sql](mdc:backend/drop_schema.sql)

## Frontend Patterns
- React components with TypeScript and Tailwind CSS
- Custom hooks for state management in [hooks/](mdc:hooks/): [use-auth.ts](mdc:hooks/use-auth.ts), [use-toast.ts](mdc:hooks/use-toast.ts), [use-notion-connection.ts](mdc:hooks/use-notion-connection.ts)
- Theme switching via next-themes (system/light/dark) in [components/theme-toggle.tsx](mdc:components/theme-toggle.tsx)
- Responsive design with mobile-first approach
- Main layout defined in [app/layout.tsx](mdc:app/layout.tsx)

## Key Components
- [components/chat-interface.tsx](mdc:components/chat-interface.tsx) - Main chat interface
- [components/sidebar.tsx](mdc:components/sidebar.tsx) - Navigation sidebar
- [components/header.tsx](mdc:components/header.tsx) - Application header
- [components/dashboard-home.tsx](mdc:components/dashboard-home.tsx) - Dashboard home page
- [components/auth-dialog.tsx](mdc:components/auth-dialog.tsx) - Authentication dialog

## Backend Services
- [backend/services/openai_service.py](mdc:backend/services/openai_service.py) - OpenAI integration
- [backend/services/notion_service.py](mdc:backend/services/notion_service.py) - Notion API integration
- [backend/services/database_schema_manager.py](mdc:backend/services/database_schema_manager.py) - Database schema management
