---
description:
globs:
alwaysApply: false
---
# Development Workflow & Coding Patterns

## Development Flow

### Starting Development
1. Run `make install` to install all dependencies (uses uv for Python, pnpm for Node.js)
2. Run `make setup-env` to create environment templates
3. Configure environment variables in `.env.local` and `backend/.env`
4. Run `make dev` or `npm run dev:full` to start both servers concurrently

### File Organization Patterns

#### Frontend Components
- **UI Components**: Place reusable UI components in [components/ui/](mdc:components/ui/) (shadcn/ui)
- **Feature Components**: Place domain-specific components in [components/](mdc:components/) root
- **Type Definitions**: Define shared interfaces in [types/](mdc:types/)
- **Custom Hooks**: Create hooks in [hooks/](mdc:hooks/) with descriptive names following `use-*` pattern
- **Utilities**: Shared functions in [lib/](mdc:lib/) with specific purposes (api, logging, utils)

#### Backend Structure
- **API Endpoints**: Organize as routers in [backend/routers/](mdc:backend/routers/)
- **Business Logic**: Implement in [backend/services/](mdc:backend/services/)
- **Configuration**: Model and database configs in [backend/config/](mdc:backend/config/)
- **Scripts**: Utility and maintenance scripts in [backend/scripts/](mdc:backend/scripts/)
- **Database**: Schema in [backend/schema.sql](mdc:backend/schema.sql), models in [backend/models.py](mdc:backend/models.py)

## Coding Standards

### TypeScript Patterns
```typescript
// Component props with proper typing
interface ChatInterfaceProps {
  onBackToHome?: () => void;
  chatSessions?: ChatSessionHook;
}

// Custom hooks pattern with proper state management
export function useChatSessions() {
  const [sessions, setSessions] = useState<ChatSession[]>([]);
  const [currentSession, setCurrentSession] = useState<ChatSession | null>(null);
  
  return {
    sessions,
    currentSession,
    createSession,
    loadSession,
    deleteSession
  };
}

// API client with proper error handling
export class ApiClient {
  private async makeRequest<T>(method: string, endpoint: string, body?: any) {
    const startTime = performance.now();
    const requestId = logger.generateAndSetRequestId();
    
    try {
      const response = await fetch(url, options);
      if (!response.ok) throw new Error(`API error: ${response.status}`);
      return await response.json();
    } catch (error) {
      logger.error(`API request failed: ${method} ${endpoint}`, error);
      throw error;
    }
  }
}
```

### FastAPI Patterns
```python
# Router structure with proper validation
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import List, Optional

router = APIRouter()

class ChatRequest(BaseModel):
    messages: List[ChatMessage]
    database_filters: Optional[List[str]] = None

@router.post("/chat")
async def chat_endpoint(request: ChatRequest):
    try:
        # Business logic in service layer
        response = await chat_service.process_chat(request)
        return response
    except Exception as e:
        logger.error(f"Chat processing failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Service layer with proper error handling
class ChatService:
    async def process_chat(self, request: ChatRequest) -> StreamingResponse:
        # Implementation with proper logging and error handling
        pass
```

### Model Configuration Patterns
```python
# Use centralized model configuration
from backend.config.model_config import get_model_config

config_manager = get_model_config()
embedding_config = config_manager.get_embedding_config()
chat_config = config_manager.get_chat_config()

# Environment-specific overrides supported
# Development vs production configurations
```

## State Management

### Frontend State Management
- **Authentication**: [use-auth.ts](mdc:hooks/use-auth.ts) with demo mode fallback
- **Notifications**: [use-toast.ts](mdc:hooks/use-toast.ts) for user feedback
- **Notion Integration**: [use-notion-connection.ts](mdc:hooks/use-notion-connection.ts) for connection status
- **Database Management**: [use-notion-databases.ts](mdc:hooks/use-notion-databases.ts) for workspace data
- **Chat Sessions**: [use-chat-sessions.ts](mdc:hooks/use-chat-sessions.ts) for persistent conversations
- **Analytics**: [use-analytics.ts](mdc:hooks/use-analytics.ts) for usage tracking
- **Local State**: Use `useState` for simple component-level state

### Backend Services Architecture
- **Database Operations**: Through dedicated service layer with proper connection management
- **OpenAI Integration**: [openai_service.py](mdc:backend/services/openai_service.py) with multi-model support
- **Notion API**: [notion_service.py](mdc:backend/services/notion_service.py) with webhook synchronization
- **Document Processing**: [document_processor.py](mdc:backend/services/document_processor.py) with chunking and embeddings
- **Chat Sessions**: [chat_session_service.py](mdc:backend/services/chat_session_service.py) with lifecycle management

## Common Development Tasks

### Adding New API Endpoints
1. Create new router in [backend/routers/](mdc:backend/routers/)
2. Implement business logic in appropriate service in [backend/services/](mdc:backend/services/)
3. Add Pydantic models for request/response validation
4. Include router in [backend/main.py](mdc:backend/main.py)
5. Update frontend API client in [lib/api.ts](mdc:lib/api.ts)
6. Add TypeScript types in [types/](mdc:types/) if needed

### Adding New UI Components
1. Create component in [components/](mdc:components/)
2. Add shadcn/ui base components via `npx shadcn-ui@latest add component-name`
3. Follow TypeScript patterns with proper prop interfaces
4. Use Tailwind CSS for styling with responsive design
5. Add to component exports for easy imports

### Model Configuration Changes
1. Update [backend/config/models.toml](mdc:backend/config/models.toml)
2. Modify [backend/config/model_config.py](mdc:backend/config/model_config.py) if needed
3. Test with [backend/scripts/model_config_demo.py](mdc:backend/scripts/model_config_demo.py)
4. Update environment-specific overrides as needed

### Database Schema Changes
1. Update [backend/schema.sql](mdc:backend/schema.sql)
2. Update Pydantic models in [backend/models.py](mdc:backend/models.py)
3. Test with [backend/drop_schema.sql](mdc:backend/drop_schema.sql) for clean slate
4. Update service layer methods to handle new schema

## Debugging & Testing

### Frontend Debugging
- Next.js dev server on port 3000 with hot reload
- Use browser dev tools for React component debugging
- Check console for authentication and API errors
- Use [components/debug-logs.tsx](mdc:components/debug-logs.tsx) for development insights

### Backend Debugging
- FastAPI dev server on port 8000 with auto-reload
- Interactive API documentation at `http://localhost:8000/docs`
- Comprehensive logging with request IDs for tracing
- Use [backend/routers/logs.py](mdc:backend/routers/logs.py) for log access
- Test ingestion with [backend/scripts/test_ingestion.py](mdc:backend/scripts/test_ingestion.py)

### Testing Utilities
- [backend/scripts/check_active_databases.py](mdc:backend/scripts/check_active_databases.py) - Verify database connections
- [backend/scripts/sync_databases.py](mdc:backend/scripts/sync_databases.py) - Manual synchronization
- Demo mode automatically enables when Supabase isn't configured

### Performance Monitoring
- Request timing and logging built into [lib/api.ts](mdc:lib/api.ts)
- Token usage tracking in [components/token-usage-indicator.tsx](mdc:components/token-usage-indicator.tsx)
- Search analytics stored in database for optimization
- Model performance metrics in configuration system
