---
description: Testing Setup Guide
globs: 
alwaysApply: false
---
# Testing Setup Guide

## Development Commands

### Frontend Testing
- `pnpm run dev` - Frontend development server (port 3000)
- `pnpm run build` - Build Next.js for production
- `pnpm run lint` - Run ESLint validation
- `npx tsc --noEmit` - TypeScript compilation check
- `pnpm run pre-commit-test` - **OPTIONAL: Full test suite before committing**

### Backend Testing
- `pnpm run backend` - Backend development server (port 8000)
- `cd backend && uv run python scripts/sync_databases.py` - Sync Notion databases
- `cd backend && uv run python scripts/model_config_demo.py` - Test model configuration
- `cd backend && uv run python test_contextual_rag.py` - Test enhanced RAG components

### Full Stack Development
- `pnpm run dev:full` - Both frontend and backend concurrently
- `make dev` - Alternative using [Makefile](mdc:Makefile)
- `make install` - Install both Python (uv) and Node (pnpm) dependencies

## Python Environment Management

**CRITICAL: Always use uv for Python operations with [pyproject.toml](mdc:backend/pyproject.toml)**

### Package Management
- **Install dependencies**: `cd backend && uv sync` (replaces pip install)
- **Add new dependency**: `uv add package_name` (updates pyproject.toml)
- **Add dev dependency**: `uv add --dev package_name`
- **Remove dependency**: `uv remove package_name`
- **Run commands**: `uv run command` (replaces .venv/bin/python)

### Script Execution
- **All Python scripts**: Must run from backend directory with `uv run python path/to/script.py`
- **Test scripts**: Located in [backend/scripts/](mdc:backend/scripts)
- **Main tests**: [backend/test_contextual_rag.py](mdc:backend/test_contextual_rag.py)

## Claude Code Testing Guidelines

### ⚠️ CRITICAL LIMITATIONS
- **NEVER start backend services with `&`** - causes 2-minute timeouts
- **`pnpm run backend` doesn't persist** in Claude Code environment
- **Always ask user to start backend** for API testing

### ✅ CORRECT WORKFLOW
1. Claude identifies need to test backend API
2. Claude asks: "Please start the backend with `pnpm run backend` so I can test [feature]"
3. User starts backend in their environment
4. Claude runs curl tests against localhost:8000
5. Claude asks user to stop backend when testing complete

### ⚡ Fast Component Testing (No Backend Required)

#### Database Connectivity Test (5 seconds)
```bash
cd backend && uv run python -c "import asyncio; from database import init_db; asyncio.run(init_db()); print('✓ DB OK')"
```

#### OpenAI Integration Test (10 seconds)
```bash
cd backend && uv run python -c "import asyncio; from services.openai_service import get_openai_service; asyncio.run(get_openai_service().generate_embedding('test')); print('✓ OpenAI OK')"
```

#### Vector Search Test (15 seconds)
```bash
cd backend && uv run python -c "
import asyncio
from database import init_db, get_db
from services.openai_service import get_openai_service

async def test():
    await init_db()
    db = get_db()
    openai_service = get_openai_service()
    embedding = await openai_service.generate_embedding('test')
    results = db.vector_search_for_single_workspace(embedding.embedding, 0.1, 3)
    print(f'✓ Vector search: {len(results)} results')

asyncio.run(test())
"
```

## Pre-Commit Testing Workflow

### Full Test Suite (For Significant Changes)
```bash
pnpm run pre-commit-test
# OR
./scripts/pre-commit-test.sh
```

**Validates:**
- ✅ TypeScript compilation passes
- ✅ ESLint validation passes
- ✅ Production build succeeds
- ✅ All pages generate correctly

### Manual Testing Alternative
```bash
# 1. TypeScript check (30 seconds)
npx tsc --noEmit

# 2. Linting check (1 minute)
pnpm run lint

# 3. Build test (2-3 minutes) - MOST IMPORTANT
rm -rf .next && pnpm run build
```

### Why This Workflow is Critical
- **Prevents CI/CD failures**: Local build mirrors GitHub Actions
- **Catches template literal issues**: JavaScript compilation can fail even when TypeScript passes
- **Ensures static export works**: Verifies all pages generate correctly
- **Saves time**: 3 minutes locally vs 10+ minute failed CI/CD cycles

## Testing Architecture

### Frontend Testing
- **Component Tests**: [__tests__/components/](mdc:__tests__/components)
- **Hook Tests**: [__tests__/hooks/](mdc:__tests__/hooks)
- **API Tests**: [__tests__/lib/](mdc:__tests__/lib)
- **Mocks**: [__tests__/mocks/simple-mocks.ts](mdc:__tests__/mocks/simple-mocks.ts)
- **Test Setup**: [test-setup.ts](mdc:test-setup.ts)
- **Vitest Config**: [vitest.config.ts](mdc:vitest.config.ts)

### Backend Testing
- **API Tests**: [backend/tests/api/](mdc:backend/tests/api)
- **Integration Tests**: [backend/tests/integration/](mdc:backend/tests/integration)
- **Unit Tests**: [backend/tests/unit/](mdc:backend/tests/unit)
- **Test Config**: [backend/conftest.py](mdc:backend/tests/conftest.py)
- **Test Runner**: [backend/run_tests.py](mdc:backend/run_tests.py)

## Debugging & Logging

### Log Files (All in logs/ directory)
- **app.log** - General application logs (JSON structured)
- **api.log** - API request/response logs with timing
- **errors.log** - Error-level logs only
- **performance.log** - Performance metrics and slow operations

### Frontend Debugging
- **Debug Component**: `<DebugLogs />` in [components/debug-logs.tsx](mdc:components/debug-logs.tsx)
- **Frontend Logger**: [lib/logger.ts](mdc:lib/logger.ts)
- **Error Logger**: [lib/frontend-error-logger.ts](mdc:lib/frontend-error-logger.ts)

### Backend Debugging Workflow
1. **Check log files first** instead of restarting services
2. **Use component testing** for faster debugging
3. **Test endpoints directly** with curl
4. **Trace data flow**: Frontend → Router → Business Logic → Database

### Process Management
- **Kill background processes**: `pkill -f uvicorn` or `pkill -f python`
- **Component testing preferred** over full server testing for speed
- **Always clean up** at end of investigations

## Configuration Testing

### Model Configuration
- **Config Demo**: [backend/scripts/model_config_demo.py](mdc:backend/scripts/model_config_demo.py)
- **Model Config**: [backend/config/models.toml](mdc:backend/config/models.toml)
- **Config Manager**: [backend/config/model_config.py](mdc:backend/config/model_config.py)

### Database Configuration
- **Database Config**: [backend/config/databases.toml](mdc:backend/config/databases.toml)
- **Schema Management**: [backend/services/database_schema_manager.py](mdc:backend/services/database_schema_manager.py)
- **Sync Script**: [backend/scripts/sync_databases.py](mdc:backend/scripts/sync_databases.py)

## Best Practices

### Development Testing
- **Run pre-commit tests** before every significant commit
- **Use component testing** for faster iteration
- **Check logs first** when debugging issues
- **Test database connectivity** before complex operations

### Production Readiness
- **Static export validation** via build process
- **All environment variables** properly configured
- **Database schema** deployed and tested
- **API endpoints** tested with real data

### Performance Testing
- **Vector search performance** via component tests
- **API response times** monitored in logs
- **Database query performance** tracked
- **Memory usage** monitored during operations
