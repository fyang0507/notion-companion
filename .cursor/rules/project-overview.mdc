---
description: 
globs: 
alwaysApply: true
---
# Project Overview

Notion Companion is a production-ready AI-powered knowledge assistant that connects to your primary Notion workspace, providing intelligent search and chat capabilities with real-time synchronization. It's a sophisticated full-stack RAG (Retrieval-Augmented Generation) application with **Enhanced Contextual Retrieval (v4.0)** and enterprise-grade features.

## Tech Stack

**Frontend**: Next.js 13.5.1 with App Router, TypeScript, Tailwind CSS, shadcn/ui components
**Backend**: FastAPI (Python with uv package manager), Supabase (PostgreSQL + pgvector), Multi-model AI integration
**Database**: PostgreSQL with pgvector extension for vector similarity search
**Package Management**: pnpm for Node.js dependencies, **uv for Python dependencies** (pyproject.toml)
**AI Models**: OpenAI (GPT-4, GPT-4-turbo, GPT-4o-mini), Claude 3 (Sonnet, Haiku)

## Key Features

### Enhanced RAG System (v4.0) âœ¨
- **Anthropic-Style Contextual Retrieval**: AI-generated context for each document chunk
- **Content-Aware Processing**: Specialized chunking for articles vs reading notes vs documentation
- **Adjacent Chunk Context**: Search results include neighboring chunks for richer context
- **Dual Embedding Strategy**: Both content and contextual embeddings (70/30 weighted)
- **Positional Linking**: Maintains document narrative flow through chunk relationships

### Core Functionality
- **Vector Search**: High-performance similarity search with configurable thresholds
- **Streaming Chat**: Real-time AI responses with Server-Sent Events
- **Multi-Model Support**: Choose between different AI models for optimal cost/performance
- **Notion Synchronization**: Real-time webhook-based content updates
- **Session Management**: Persistent chat sessions with full history
- **Advanced Filtering**: Filter by databases, date ranges, authors, tags, and content types

### Enterprise Features
- **Hybrid Search**: Combines vector similarity with full-text search
- **Citation System**: Automatic source attribution with direct links to Notion
- **Analytics**: Query performance tracking and usage optimization
- **Multimedia Support**: Handle images, files, and attachments from Notion
- **Demo Mode**: Graceful fallback when Supabase isn't configured
- **Comprehensive Logging**: JSON-structured logs with request tracking

## Architecture (v3.0 - Single Workspace)

**IMPORTANT**: The workspace concept was completely removed in v3.0. The application now supports **ONLY ONE Notion workspace** with multiple databases.

### Database Schema
- **Single Workspace Architecture** with core tables:
  - `notion_databases` - Connected Notion databases registry
  - `documents` - Notion pages with content embeddings and metadata
  - `document_chunks` - Enhanced with contextual retrieval fields
  - `document_metadata` - Extracted queryable fields for filtering
  - `multimedia_assets` - Support for images, files, and attachments
  - `chat_sessions` - Persistent chat session management
  - `chat_messages` - Individual messages with citations and context

### Enhanced RAG Components
- [backend/services/content_type_detector.py](mdc:backend/services/content_type_detector.py) - Detects document types
- [backend/services/chunking_strategies.py](mdc:backend/services/chunking_strategies.py) - Content-aware chunking
- [backend/services/contextual_chunker.py](mdc:backend/services/contextual_chunker.py) - Anthropic-style contextual retrieval
- [backend/services/contextual_search_engine.py](mdc:backend/services/contextual_search_engine.py) - Enhanced search with context enrichment

## Project Structure

- [app/](mdc:app) - Next.js App Router pages and layouts
  - [analytics/](mdc:app/analytics) - Usage analytics dashboard
  - [setup/](mdc:app/setup) - Initial configuration wizard
  - [workspaces/](mdc:app/workspaces) - Workspace management
- [backend/](mdc:backend) - FastAPI application with modular architecture
  - [config/](mdc:backend/config) - Model and database configurations
  - [routers/](mdc:backend/routers) - API endpoint definitions
  - [services/](mdc:backend/services) - Business logic and integrations
  - [scripts/](mdc:backend/scripts) - Utility and maintenance scripts
  - [tests/](mdc:backend/tests) - Comprehensive test suite
- [components/](mdc:components) - React components including extensive shadcn/ui library
- [hooks/](mdc:hooks) - Custom React hooks for state management
- [lib/](mdc:lib) - Utility functions, API clients, and shared logic
- [types/](mdc:types) - TypeScript type definitions
- [__tests__/](mdc:__tests__) - Frontend testing suite

## Development Commands

### Quick Start
- `make install` - Install all dependencies (Python + Node.js)
- `make dev` - Start both frontend and backend servers
- `make setup-env` - Create environment file templates

### Individual Services
- `pnpm run dev` - Frontend only (port 3000)
- `pnpm run backend` - Backend only (port 8000)
- `pnpm run dev:full` - Both frontend and backend concurrently

### Build & Quality
- `pnpm run build` - Build Next.js for production (static export)
- `pnpm run lint` - Run ESLint validation
- `pnpm run pre-commit-test` - **OPTIONAL: Full test suite before committing**

### Python Environment (uv Package Manager)
**CRITICAL: Always use uv for Python operations**
- `cd backend && uv sync` - Install Python dependencies
- `cd backend && uv add package_name` - Add new dependency
- `cd backend && uv run python script.py` - Run Python scripts

### Database & Synchronization
- `cd backend && uv run python scripts/sync_databases.py` - Sync Notion databases with enhanced contextual processing
- `cd backend && uv run python scripts/sync_databases.py --dry-run` - Test sync configuration
- [backend/drop_schema.sql](mdc:backend/drop_schema.sql) - Reset database schema
- [backend/schema.sql](mdc:backend/schema.sql) - Full database schema definition

### Testing & Debugging
- `cd backend && uv run python test_contextual_rag.py` - Test enhanced RAG components
- `cd backend && uv run python scripts/model_config_demo.py` - Test model configurations
- [backend/scripts/check_active_databases.py](mdc:backend/scripts/check_active_databases.py) - Verify database connections
- [backend/scripts/test_ingestion.py](mdc:backend/scripts/test_ingestion.py) - Test document processing

## Configuration Files

### Core Configuration
- [package.json](mdc:package.json) - Node.js dependencies and scripts
- [backend/pyproject.toml](mdc:backend/pyproject.toml) - Python dependencies with uv
- [backend/config/models.toml](mdc:backend/config/models.toml) - **Centralized AI model configurations**
- [backend/config/databases.toml](mdc:backend/config/databases.toml) - Database connection configurations

### Frontend Configuration
- [next.config.js](mdc:next.config.js) - Next.js build configuration with static export
- [tailwind.config.ts](mdc:tailwind.config.ts) - Tailwind CSS configuration
- [components.json](mdc:components.json) - shadcn/ui component configuration
- [vitest.config.ts](mdc:vitest.config.ts) - Frontend testing configuration

### Backend Configuration
- [backend/main.py](mdc:backend/main.py) - FastAPI application entry point
- [backend/database.py](mdc:backend/database.py) - Database initialization and connection management
- [backend/logging_config.py](mdc:backend/logging_config.py) - Comprehensive logging setup

## Model Configuration (Centralized)

All AI models, prompts, and settings are managed in [backend/config/models.toml](mdc:backend/config/models.toml):

### Key Configuration Sections
- **Model Selection**: Embedding (text-embedding-3-small), Chat (gpt-4o-mini), Summarization models
- **Vector Search Parameters**: Configurable similarity thresholds, context enrichment settings
- **Prompt Templates**: Centralized prompt management for all LLM interactions
- **Performance Settings**: Rate limiting, batch sizes, token limits, retry configurations

### Vector Search Configuration
```toml
[vector_search]
match_threshold = 0.1              # Similarity threshold (fixed from 0.7)
enable_context_enrichment = true   # Adjacent chunk context retrieval
contextual_weight = 0.7            # Anthropic-style contextual vs content embedding weights
context_boost_factor = 0.05        # Re-ranking boost for contextual information
```

## Testing Architecture

### Frontend Testing
- **Component Tests**: [__tests__/components/](mdc:__tests__/components)
- **Hook Tests**: [__tests__/hooks/](mdc:__tests__/hooks)
- **API Tests**: [__tests__/lib/](mdc:__tests__/lib)
- **Test Setup**: [test-setup.ts](mdc:test-setup.ts)

### Backend Testing
- **API Tests**: [backend/tests/api/](mdc:backend/tests/api)
- **Integration Tests**: [backend/tests/integration/](mdc:backend/tests/integration)
- **Unit Tests**: [backend/tests/unit/](mdc:backend/tests/unit)
- **Test Runner**: [backend/run_tests.py](mdc:backend/run_tests.py)

## Logging & Debugging

### Log Files (All in logs/ directory)
- **app.log** - General application logs (JSON structured)
- **api.log** - API request/response logs with timing
- **errors.log** - Error-level logs only
- **performance.log** - Performance metrics and slow operations

### Frontend Debugging
- **Debug Component**: [components/debug-logs.tsx](mdc:components/debug-logs.tsx)
- **Frontend Logger**: [lib/logger.ts](mdc:lib/logger.ts)
- **Error Logger**: [lib/frontend-error-logger.ts](mdc:lib/frontend-error-logger.ts)

## Documentation

- [CLAUDE.md](mdc:CLAUDE.md) - Comprehensive development guide
- [docs/](mdc:docs) - Complete documentation directory
- [docs/CONTEXTUAL_RAG_IMPLEMENTATION.md](mdc:docs/CONTEXTUAL_RAG_IMPLEMENTATION.md) - Enhanced RAG technical details
- [docs/DEVELOPMENT_WORKFLOW.md](mdc:docs/DEVELOPMENT_WORKFLOW.md) - Testing procedures and best practices
